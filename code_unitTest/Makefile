#################################################
# Configuration
##################################################
#Default build type
CONF=debug

#
# Tool names
#

#The name of the compiler to use
CXX = g++

#
# Directories
#

#Directory for build temporaries
BUILD_DIR = build

#What directory contains the source files for the main exectuable?
EXE_SRC_DIR = src

#What directory contains the source files for the street map library tests?
TEST_DIR = tests


#
# Compiler flags
#

#What warning flags should be passed to the compiler?
WARN_FLAGS = -Wall

#What include flags should be passed to the compiler?
INCLUDE_FLAGS = -I$(EXE_SRC_DIR) -I/usr/include/

#What options to generate header dependancy files should be passed to the compiler?
DEP_FLAGS = -MMD -MP

#Collect all the options to give to the compiler
CFLAGS = $(DEP_FLAGS) $(WARN_FLAGS) $(INCLUDE_FLAGS) -g --std=c++11

#Flags for linking
LFLAGS = 

#
#Output files
#

#Name of the primary executable
EXE=money

TEST_EXE=test_money

#
# Generate object file names from source file names
#

#Objects associated with the main executable
EXE_OBJ=$(patsubst %.cpp, $(BUILD_DIR)/%.o,$(wildcard $(EXE_SRC_DIR)/*.cpp))

#Objects associated with tests for the street map library
TEST_OBJ=$(patsubst %.cpp, $(BUILD_DIR)/%.o,$(wildcard $(TEST_DIR)/*.cpp))

#
# Depencancy files
#

#To capture dependancies on header files,
# we told the compiler to generate dependancy 
# files associated with each object file
#
#The ':.o=.d' syntax means replace each filename ending in .o with .d
# For example:
#   build/main/main.o would become build/main/main.d
DEP = $(EXE_OBJ:.o=.d) $(TEST_OBJ:.o=.d)

#Phony targets are always run (i.e. are always out of date)
.PHONY: clean

##################################################
# Make targets
##################################################

#The default target
# This is called when you type 'make' on the command line
all: $(EXE)

#This runs the unit test executable
test: $(TEST_EXE)
	@./$^

#Include header file dependancies generated by a
# previous compile
-include $(DEP)

#Link main executable
$(EXE): $(EXE_OBJ) $(EXE_MAIN_OBJ)
	$(CXX) $(CFLAGS) $^ $(LFLAGS) -o $@

#Link test executable
# Note that we must remove main.o from $(EXE_OBJ) so we use the main() defined under tests
$(TEST_EXE): $(TEST_OBJ) $(filter-out %/main.o,$(EXE_OBJ))
	$(CXX) $(CFLAGS) $^ $(LFLAGS) -lunittest++ -o $@

#Note: % matches recursively between prefix and suffix
#      so %.cpp would match both src/a/a.cpp
#      and src/b/b.cpp
$(BUILD_DIR)/%.o: %.cpp
	@mkdir -p $(@D)
	$(CXX) $(CFLAGS) -c $< -o $@

clean:
	rm -rf $(BUILD_DIR)
	rm -f $(EXE) $(TEST_EXE)

help:
	@echo "Makefile for ECE297 Unit Test Quick Start Guide"
	@echo ""
	@echo "Usage: "
	@echo '    > make'
	@echo "        Call the default make target (all)."
	@echo "        This builds the project executable: '$(EXE)'."
	@echo "    > make clean"
	@echo "        Removes any generated files including exectuables,"
	@echo "        static libraries, and object files."
	@echo "    > make test"
	@echo "        Runs unit tests."
	@echo ""
